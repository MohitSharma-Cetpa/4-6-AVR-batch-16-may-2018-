
11.LCD_using_pointer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000294  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000163  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e6  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000150  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000095  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 75 00 	call	0xea	; 0xea <main>
  7a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
void lcd_string(char *);    //to display string on lcd
void lcd_enable();         //to enable lcd

void lcd_cmd(char x)
 {
  PORTB=x;//sending cmd to lcd
  82:	88 bb       	out	0x18, r24	; 24
	PORTA&=~(1<<PA0);//RS=0   //selection of cmd mode
  84:	d8 98       	cbi	0x1b, 0	; 27
	PORTA&=~(1<<PA1);//RW=0
  86:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<PA2);//EN=1
  88:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	97 e2       	ldi	r25, 0x27	; 39
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(40);
	PORTA&=~(1<<PA2);//EN=0	
  96:	da 98       	cbi	0x1b, 2	; 27
  98:	08 95       	ret

0000009a <lcd_data>:
}

void lcd_data(char x)
{
 PORTB=x;
  9a:	88 bb       	out	0x18, r24	; 24
	PORTA|=(1<<PA0);//RS=1
  9c:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA&=~(1<<PA1);//RW=0
  9e:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<PA2);//EN=1
  a0:	da 9a       	sbi	0x1b, 2	; 27
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	97 e2       	ldi	r25, 0x27	; 39
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_data+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_data+0x12>
  ac:	00 00       	nop
	_delay_ms(40);
	PORTA&=~(1<<PA2);//EN=0
  ae:	da 98       	cbi	0x1b, 2	; 27
  b0:	08 95       	ret

000000b2 <lcd_string>:
}

void lcd_string(char *ptr)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	ec 01       	movw	r28, r24
	while(*ptr)    //checking for NULL
  b8:	88 81       	ld	r24, Y
  ba:	88 23       	and	r24, r24
  bc:	31 f0       	breq	.+12     	; 0xca <lcd_string+0x18>
	PORTA|=(1<<PA2);//EN=1
	_delay_ms(40);
	PORTA&=~(1<<PA2);//EN=0
}

void lcd_string(char *ptr)
  be:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr)    //checking for NULL
	{
		lcd_data(*ptr); // passing values to lcd
  c0:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_data>
	PORTA&=~(1<<PA2);//EN=0
}

void lcd_string(char *ptr)
{
	while(*ptr)    //checking for NULL
  c4:	89 91       	ld	r24, Y+
  c6:	81 11       	cpse	r24, r1
  c8:	fb cf       	rjmp	.-10     	; 0xc0 <lcd_string+0xe>
	{
		lcd_data(*ptr); // passing values to lcd
		ptr++; //increment address of ptr variable
	}
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <lcd_enable>:

void lcd_enable()
{
 DDRA=DDRB=0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	8a bb       	out	0x1a, r24	; 26
 lcd_cmd(0x38);
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_cmd(0x0e);
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_cmd(0x06);	
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  e8:	08 95       	ret

000000ea <main>:
}

int main(void)
{
  lcd_enable();
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_enable>
  lcd_string("hello World !");
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_string>
  lcd_cmd(0xc0);//2nd line of lcd
  f6:	80 ec       	ldi	r24, 0xC0	; 192
  f8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  lcd_string(" i m 2nd line ");		
  fc:	8e e6       	ldi	r24, 0x6E	; 110
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_string>
}
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
