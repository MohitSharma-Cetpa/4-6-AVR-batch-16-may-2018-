
22.Master_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000958  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b3  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000168  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001de  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  7a:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_data>:
void LCD_string(char *); //to display string on LCD


void LCD_data(char x)
{
	LCD_PORT=x&0xf0;     //sending data to lcd
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	9b bb       	out	0x1b, r25	; 27
	
	LCD_PORT|=(1<<Rs);  //RS=1 data register selected
  88:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<Rw); //RW=0 write on lcd
  8a:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<En);  //EN=1
  8c:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e0       	ldi	r30, 0x0F	; 15
  90:	f7 e2       	ldi	r31, 0x27	; 39
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_data+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_data+0x16>
  98:	00 00       	nop
	_delay_ms(40);   // Time to latch cmd in lcd
	LCD_PORT&=~(1<<En); //EN=0
  9a:	da 98       	cbi	0x1b, 2	; 27

	LCD_PORT=(x<<4)&0xf0;  //sending rest of the data to lcd
  9c:	f0 e1       	ldi	r31, 0x10	; 16
  9e:	8f 9f       	mul	r24, r31
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT|=(1<<Rs);  //RS=1 data register selected
  a6:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<Rw); //RW=0 write on lcd
  a8:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<En);  //EN=1
  aa:	da 9a       	sbi	0x1b, 2	; 27
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	97 e2       	ldi	r25, 0x27	; 39
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_data+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_data+0x34>
  b6:	00 00       	nop
	_delay_ms(40);   // Time to latch cmd in lcd
	LCD_PORT&=~(1<<En); //EN=0
  b8:	da 98       	cbi	0x1b, 2	; 27
  ba:	08 95       	ret

000000bc <LCD_cmd>:
}

void LCD_cmd(char x)
{
	LCD_PORT=x&0xf0;     //sending data to lcd
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	9b bb       	out	0x1b, r25	; 27
	
	LCD_PORT&=~(1<<Rs);  //RS=0 cmd register selected
  c2:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<Rw); //RW=0 write on lcd
  c4:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<En);  //EN=1
  c6:	da 9a       	sbi	0x1b, 2	; 27
  c8:	ef e0       	ldi	r30, 0x0F	; 15
  ca:	f7 e2       	ldi	r31, 0x27	; 39
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_cmd+0x10>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_cmd+0x16>
  d2:	00 00       	nop
	_delay_ms(40);   // Time to latch cmd in lcd
	LCD_PORT&=~(1<<En); //EN=0
  d4:	da 98       	cbi	0x1b, 2	; 27
	
	LCD_PORT=(x<<4)&0xf0;  //sending rest of the data to lcd
  d6:	f0 e1       	ldi	r31, 0x10	; 16
  d8:	8f 9f       	mul	r24, r31
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT&=~(1<<Rs);  //RS=0 cmd register selected
  e0:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<Rw); //RW=0 write on lcd
  e2:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<En);  //EN=1
  e4:	da 9a       	sbi	0x1b, 2	; 27
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_cmd+0x2e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_cmd+0x34>
  f0:	00 00       	nop
	_delay_ms(40);   // Time to latch cmd in lcd
	LCD_PORT&=~(1<<En); //EN=0
  f2:	da 98       	cbi	0x1b, 2	; 27
  f4:	08 95       	ret

000000f6 <LCD_enable>:
}

void LCD_enable()
{
	LCD_PORT_DIR=0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a bb       	out	0x1a, r24	; 26
	LCD_cmd(0x02);//return home
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
	LCD_cmd(0x28);//5*7 matrix in lcd 4bit mode
 100:	88 e2       	ldi	r24, 0x28	; 40
 102:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
	LCD_cmd(0x06);//shift cursor towards right
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
	LCD_cmd(0x0C);//display on , not cursor blink
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
	LCD_cmd(0x01);//clear screen
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 118:	08 95       	ret

0000011a <LCD_string>:
}

void LCD_string(char *ptr)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	while(*ptr!='\0')//while(*ptr)
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <LCD_string+0x18>
	LCD_cmd(0x06);//shift cursor towards right
	LCD_cmd(0x0C);//display on , not cursor blink
	LCD_cmd(0x01);//clear screen
}

void LCD_string(char *ptr)
 126:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!='\0')//while(*ptr)
	{
		LCD_data(*ptr);//sending data to lcd
 128:	0e 94 41 00 	call	0x82	; 0x82 <LCD_data>
	LCD_cmd(0x01);//clear screen
}

void LCD_string(char *ptr)
{
	while(*ptr!='\0')//while(*ptr)
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <LCD_string+0xe>
	{
		LCD_data(*ptr);//sending data to lcd
		ptr++; //address increment
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <i2c_init>:
#include <util/LCD.h>


void i2c_init()
{
	TWSR=0X00;//no Prescaler
 138:	11 b8       	out	0x01, r1	; 1
	TWBR=0X0C;//bit rate 18(100khz)
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWEN)|(1<<TWEA);
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	86 bf       	out	0x36, r24	; 54
 142:	08 95       	ret

00000144 <i2c_start>:
}

int  i2c_start(void)//check
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWSTA);//start condition
 144:	84 ea       	ldi	r24, 0xA4	; 164
 146:	86 bf       	out	0x36, r24	; 54
	while( (TWCR&(1<<TWINT))==0); //wait here till Bus is busy i.e. TWINT0==0;
 148:	06 b6       	in	r0, 0x36	; 54
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <i2c_start+0x4>
	switch(TWSR)
 14e:	81 b1       	in	r24, 0x01	; 1
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	19 f0       	breq	.+6      	; 0x15a <i2c_start+0x16>
 154:	80 31       	cpi	r24, 0x10	; 16
 156:	89 f4       	brne	.+34     	; 0x17a <i2c_start+0x36>
 158:	08 c0       	rjmp	.+16     	; 0x16a <i2c_start+0x26>
	{
		case 0x08:LCD_cmd(0x01);LCD_string("START sent ");break;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 160:	80 e6       	ldi	r24, 0x60	; 96
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 168:	08 95       	ret
		case 0x10:LCD_cmd(0x01);LCD_string("RSTART ");break;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 170:	8c e6       	ldi	r24, 0x6C	; 108
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 178:	08 95       	ret
		default:LCD_cmd(0x01);LCD_string("ERROR in STart");break;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 180:	84 e7       	ldi	r24, 0x74	; 116
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
	}
}
 188:	08 95       	ret

0000018a <i2c_write>:

int i2c_write(unsigned char X)
{
	TWDR=X;
 18a:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);
 18c:	84 ec       	ldi	r24, 0xC4	; 196
 18e:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);// wait here till Bus is busy i.e. TWINT0==0;
 190:	06 b6       	in	r0, 0x36	; 54
 192:	07 fe       	sbrs	r0, 7
 194:	fd cf       	rjmp	.-6      	; 0x190 <i2c_write+0x6>
	switch(TWSR)
 196:	81 b1       	in	r24, 0x01	; 1
 198:	88 33       	cpi	r24, 0x38	; 56
 19a:	09 f4       	brne	.+2      	; 0x19e <i2c_write+0x14>
 19c:	c6 c0       	rjmp	.+396    	; 0x32a <i2c_write+0x1a0>
 19e:	78 f4       	brcc	.+30     	; 0x1be <i2c_write+0x34>
 1a0:	80 32       	cpi	r24, 0x20	; 32
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <i2c_write+0x1c>
 1a4:	b6 c0       	rjmp	.+364    	; 0x312 <i2c_write+0x188>
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <i2c_write+0x26>
 1a8:	88 31       	cpi	r24, 0x18	; 24
 1aa:	09 f0       	breq	.+2      	; 0x1ae <i2c_write+0x24>
 1ac:	0c c1       	rjmp	.+536    	; 0x3c6 <i2c_write+0x23c>
 1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <i2c_write+0x58>
 1b0:	88 32       	cpi	r24, 0x28	; 40
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <i2c_write+0x2c>
 1b4:	d2 c0       	rjmp	.+420    	; 0x35a <i2c_write+0x1d0>
 1b6:	80 33       	cpi	r24, 0x30	; 48
 1b8:	09 f0       	breq	.+2      	; 0x1bc <i2c_write+0x32>
 1ba:	05 c1       	rjmp	.+522    	; 0x3c6 <i2c_write+0x23c>
 1bc:	dd c0       	rjmp	.+442    	; 0x378 <i2c_write+0x1ee>
 1be:	80 35       	cpi	r24, 0x50	; 80
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <i2c_write+0x3a>
 1c2:	f9 c0       	rjmp	.+498    	; 0x3b6 <i2c_write+0x22c>
 1c4:	38 f4       	brcc	.+14     	; 0x1d4 <i2c_write+0x4a>
 1c6:	80 34       	cpi	r24, 0x40	; 64
 1c8:	09 f4       	brne	.+2      	; 0x1cc <i2c_write+0x42>
 1ca:	b7 c0       	rjmp	.+366    	; 0x33a <i2c_write+0x1b0>
 1cc:	88 34       	cpi	r24, 0x48	; 72
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <i2c_write+0x48>
 1d0:	fa c0       	rjmp	.+500    	; 0x3c6 <i2c_write+0x23c>
 1d2:	bb c0       	rjmp	.+374    	; 0x34a <i2c_write+0x1c0>
 1d4:	88 35       	cpi	r24, 0x58	; 88
 1d6:	09 f4       	brne	.+2      	; 0x1da <i2c_write+0x50>
 1d8:	e6 c0       	rjmp	.+460    	; 0x3a6 <i2c_write+0x21c>
 1da:	80 36       	cpi	r24, 0x60	; 96
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <i2c_write+0x56>
 1de:	f3 c0       	rjmp	.+486    	; 0x3c6 <i2c_write+0x23c>
 1e0:	da c0       	rjmp	.+436    	; 0x396 <i2c_write+0x20c>
	{
		case 0x18:LCD_cmd(0x01);LCD_string("SLA+W success\r ");
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 1e8:	83 e8       	ldi	r24, 0x83	; 131
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
		          LCD_cmd(0xc0);LCD_string("ACK received\r");
 1f0:	80 ec       	ldi	r24, 0xC0	; 192
 1f2:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 1f6:	83 e9       	ldi	r24, 0x93	; 147
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
				  TWDR='A';
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	83 b9       	out	0x03, r24	; 3
                  TWCR=(1<<TWEN)|(1<<TWINT);
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	86 bf       	out	0x36, r24	; 54
  		          while((TWCR&(1<<TWINT))==0);// wait here till Bus is busy i.e. TWINT0==0;
 206:	06 b6       	in	r0, 0x36	; 54
 208:	07 fe       	sbrs	r0, 7
 20a:	fd cf       	rjmp	.-6      	; 0x206 <i2c_write+0x7c>
				  switch(TWSR)
 20c:	81 b1       	in	r24, 0x01	; 1
 20e:	80 34       	cpi	r24, 0x40	; 64
 210:	91 f1       	breq	.+100    	; 0x276 <i2c_write+0xec>
 212:	70 f4       	brcc	.+28     	; 0x230 <i2c_write+0xa6>
 214:	80 33       	cpi	r24, 0x30	; 48
 216:	09 f4       	brne	.+2      	; 0x21a <i2c_write+0x90>
 218:	4d c0       	rjmp	.+154    	; 0x2b4 <i2c_write+0x12a>
 21a:	30 f4       	brcc	.+12     	; 0x228 <i2c_write+0x9e>
 21c:	80 32       	cpi	r24, 0x20	; 32
 21e:	b9 f0       	breq	.+46     	; 0x24e <i2c_write+0xc4>
 220:	88 32       	cpi	r24, 0x28	; 40
 222:	09 f0       	breq	.+2      	; 0x226 <i2c_write+0x9c>
 224:	6e c0       	rjmp	.+220    	; 0x302 <i2c_write+0x178>
 226:	37 c0       	rjmp	.+110    	; 0x296 <i2c_write+0x10c>
 228:	88 33       	cpi	r24, 0x38	; 56
 22a:	09 f0       	breq	.+2      	; 0x22e <i2c_write+0xa4>
 22c:	6a c0       	rjmp	.+212    	; 0x302 <i2c_write+0x178>
 22e:	1b c0       	rjmp	.+54     	; 0x266 <i2c_write+0xdc>
 230:	80 35       	cpi	r24, 0x50	; 80
 232:	09 f4       	brne	.+2      	; 0x236 <i2c_write+0xac>
 234:	5e c0       	rjmp	.+188    	; 0x2f2 <i2c_write+0x168>
 236:	20 f4       	brcc	.+8      	; 0x240 <i2c_write+0xb6>
 238:	88 34       	cpi	r24, 0x48	; 72
 23a:	09 f0       	breq	.+2      	; 0x23e <i2c_write+0xb4>
 23c:	62 c0       	rjmp	.+196    	; 0x302 <i2c_write+0x178>
 23e:	23 c0       	rjmp	.+70     	; 0x286 <i2c_write+0xfc>
 240:	88 35       	cpi	r24, 0x58	; 88
 242:	09 f4       	brne	.+2      	; 0x246 <i2c_write+0xbc>
 244:	4e c0       	rjmp	.+156    	; 0x2e2 <i2c_write+0x158>
 246:	80 36       	cpi	r24, 0x60	; 96
 248:	09 f0       	breq	.+2      	; 0x24c <i2c_write+0xc2>
 24a:	5b c0       	rjmp	.+182    	; 0x302 <i2c_write+0x178>
 24c:	42 c0       	rjmp	.+132    	; 0x2d2 <i2c_write+0x148>
				  {
                   		case 0x20:LCD_cmd(0x01); LCD_string("SLA+W sucess\r"); LCD_string(" but NOT ACK received\r ");break;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 254:	81 ea       	ldi	r24, 0xA1	; 161
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 25c:	8f ea       	ldi	r24, 0xAF	; 175
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 264:	08 95       	ret
                   		case 0x38:LCD_cmd(0x01); LCD_string("Arbitration lost\r");break;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 26c:	87 ec       	ldi	r24, 0xC7	; 199
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 274:	08 95       	ret
                   		case 0x40:LCD_cmd(0x01); LCD_string("SLA+R ACK RECEIVED\r");break;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 27c:	89 ed       	ldi	r24, 0xD9	; 217
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 284:	08 95       	ret
                   		case 0x48:LCD_cmd(0x01); LCD_string("SLA+R  NOT ACK RECEIVED\r");break;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 28c:	8d ee       	ldi	r24, 0xED	; 237
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 294:	08 95       	ret
                   		case 0x28:LCD_cmd(0x01); LCD_string("data tx ");LCD_cmd(0xc0);LCD_string("ACK has been received\r");break;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 2b2:	08 95       	ret
                   		case 0x30:LCD_cmd(0x01); LCD_string("data tx"); LCD_cmd(0xc0);LCD_string(" not ACK\r");break;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 2ba:	86 e2       	ldi	r24, 0x26	; 38
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 2c2:	80 ec       	ldi	r24, 0xC0	; 192
 2c4:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 2c8:	8e e2       	ldi	r24, 0x2E	; 46
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 2d0:	08 95       	ret
                   		case 0x60:LCD_cmd(0x01); LCD_string("data nt by master");break;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 2d8:	88 e3       	ldi	r24, 0x38	; 56
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 2e0:	08 95       	ret
                   		case 0x58:LCD_cmd(0x01); LCD_string("not ack ");break;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 2e8:	8a e4       	ldi	r24, 0x4A	; 74
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 2f0:	08 95       	ret
                   		case 0x50:LCD_cmd(0x01); LCD_string("data received");break;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 2f8:	83 e5       	ldi	r24, 0x53	; 83
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 300:	08 95       	ret
                   		default: LCD_cmd(0x01);  LCD_string("ERROR in SLA+W\r ");
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 308:	81 e6       	ldi	r24, 0x61	; 97
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 310:	08 95       	ret
					  
				  }
				  break;
		case 0x20:LCD_cmd(0x01); LCD_string("SLA+W sucess\r"); LCD_string(" but NOT ACK received\r ");break;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 318:	81 ea       	ldi	r24, 0xA1	; 161
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 320:	8f ea       	ldi	r24, 0xAF	; 175
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 328:	08 95       	ret
		case 0x38:LCD_cmd(0x01); LCD_string("Arbitration lost\r");break;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 330:	87 ec       	ldi	r24, 0xC7	; 199
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 338:	08 95       	ret
		case 0x40:LCD_cmd(0x01); LCD_string("SLA+R ACK RECEIVED\r");break;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 340:	89 ed       	ldi	r24, 0xD9	; 217
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 348:	08 95       	ret
		case 0x48:LCD_cmd(0x01); LCD_string("SLA+R  NOT ACK RECEIVED\r");break;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 350:	8d ee       	ldi	r24, 0xED	; 237
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 358:	08 95       	ret
		case 0x28:LCD_cmd(0x01); LCD_string("data tx ");LCD_cmd(0xc0);LCD_string("ACK has been received\r");break;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 368:	80 ec       	ldi	r24, 0xC0	; 192
 36a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 376:	08 95       	ret
		case 0x30:LCD_cmd(0x01); LCD_string("data tx"); LCD_cmd(0xc0);LCD_string(" not ACK\r");break;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 37e:	86 e2       	ldi	r24, 0x26	; 38
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 386:	80 ec       	ldi	r24, 0xC0	; 192
 388:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 38c:	8e e2       	ldi	r24, 0x2E	; 46
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 394:	08 95       	ret
		case 0x60:LCD_cmd(0x01); LCD_string("data nt by master");break;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 39c:	88 e3       	ldi	r24, 0x38	; 56
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 3a4:	08 95       	ret
		case 0x58:LCD_cmd(0x01); LCD_string("not ack ");break;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 3ac:	8a e4       	ldi	r24, 0x4A	; 74
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 3b4:	08 95       	ret
		case 0x50:LCD_cmd(0x01); LCD_string("data received");break;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 3bc:	83 e5       	ldi	r24, 0x53	; 83
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
 3c4:	08 95       	ret
		default: LCD_cmd(0x01);  LCD_string("ERROR in SLA+W\r ");
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
 3cc:	81 e6       	ldi	r24, 0x61	; 97
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
	}
}
 3d4:	08 95       	ret

000003d6 <main>:
}


int main()
{
  LCD_enable();
 3d6:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_enable>
  LCD_cmd(0xc0);
 3da:	80 ec       	ldi	r24, 0xC0	; 192
 3dc:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_cmd>
  LCD_string("sending data");
 3e0:	82 e7       	ldi	r24, 0x72	; 114
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_string>
  i2c_init();
 3e8:	0e 94 9c 00 	call	0x138	; 0x138 <i2c_init>
  i2c_start();
 3ec:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_start>
  i2c_write(0xfe);
 3f0:	8e ef       	ldi	r24, 0xFE	; 254
 3f2:	0e 94 c5 00 	call	0x18a	; 0x18a <i2c_write>
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <main+0x20>

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
