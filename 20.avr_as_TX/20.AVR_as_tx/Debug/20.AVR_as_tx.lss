
20.AVR_as_tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000000d8  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000151  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f5  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000118  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d1  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000057  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  7a:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_enable>:
#include <avr/io.h>
#include <util/delay.h>

int usart_enable()
 {
  UCSRB=(1<<TXEN);//AVR as tx
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	8a b9       	out	0x0a, r24	; 10
  UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//8bit data size
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
  UBRRL=51;//9600 buad rate	
  8a:	83 e3       	ldi	r24, 0x33	; 51
  8c:	89 b9       	out	0x09, r24	; 9
 }
  8e:	08 95       	ret

00000090 <tx>:

void tx(char data)
 {
  UDR=data;	
  90:	8c b9       	out	0x0c, r24	; 12
  while (!(UCSRA&(1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <tx+0x2>
 }
  96:	08 95       	ret

00000098 <tx_string>:

void tx_string(char *msg)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	ec 01       	movw	r28, r24
 while (*msg)
  9e:	88 81       	ld	r24, Y
  a0:	88 23       	and	r24, r24
  a2:	31 f0       	breq	.+12     	; 0xb0 <tx_string+0x18>
 {
  UDR=data;	
  while (!(UCSRA&(1<<UDRE)));
 }

void tx_string(char *msg)
  a4:	21 96       	adiw	r28, 0x01	; 1
{
 while (*msg)
 {
  tx(*msg);
  a6:	0e 94 48 00 	call	0x90	; 0x90 <tx>
  while (!(UCSRA&(1<<UDRE)));
 }

void tx_string(char *msg)
{
 while (*msg)
  aa:	89 91       	ld	r24, Y+
  ac:	81 11       	cpse	r24, r1
  ae:	fb cf       	rjmp	.-10     	; 0xa6 <tx_string+0xe>
 {
  tx(*msg);
  msg++;	 
 }
}
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <main>:


int main(void)
{
  usart_enable();	
  b6:	0e 94 41 00 	call	0x82	; 0x82 <usart_enable>
   // while(1)
    {
     tx('A');
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	0e 94 48 00 	call	0x90	; 0x90 <tx>
	 tx('B');
  c0:	82 e4       	ldi	r24, 0x42	; 66
  c2:	0e 94 48 00 	call	0x90	; 0x90 <tx>
	 
	 tx_string("mohit sharma cetpa infotech pvt ltd..,f;sd,;lfm;lmflsdm'flmsd'lfm'lsdmf'ldsm'flmsd'mdf"); 
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 4c 00 	call	0x98	; 0x98 <tx_string>
    }
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
