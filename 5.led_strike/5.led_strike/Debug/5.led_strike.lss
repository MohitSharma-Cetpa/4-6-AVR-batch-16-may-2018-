
5.led_strike.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000012a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000001c0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000162  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f0  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001a1  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000024  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000111  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000070  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int max=8,y=0;

int main(void)
{
  DDRA=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
       for (int i=0;i<max;i++)
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
       {
		   PORTA=y|(1<<i);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f0 e0       	ldi	r31, 0x00	; 0
       --max;
	   y=128+y/2;
	   
	   if (max==0)
	      {
		   max=8;
  a2:	48 e0       	ldi	r20, 0x08	; 8
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	15 c0       	rjmp	.+42     	; 0xd2 <main+0x40>
  DDRA=0xff;
    while(1)
    {
       for (int i=0;i<max;i++)
       {
		   PORTA=y|(1<<i);
  a8:	cb 01       	movw	r24, r22
  aa:	02 2e       	mov	r0, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x20>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <main+0x1c>
  b6:	90 81       	ld	r25, Z
  b8:	89 2b       	or	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	87 ea       	ldi	r24, 0xA7	; 167
  be:	91 e6       	ldi	r25, 0x61	; 97
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x34>
  c6:	00 00       	nop
int main(void)
{
  DDRA=0xff;
    while(1)
    {
       for (int i=0;i<max;i++)
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x40>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	80 91 60 00 	lds	r24, 0x0060
  d6:	90 91 61 00 	lds	r25, 0x0061
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	24 f3       	brlt	.-56     	; 0xa8 <main+0x16>
       {
		   PORTA=y|(1<<i);
		   _delay_ms(100);
       }
       --max;
  e0:	9c 01       	movw	r18, r24
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	30 93 61 00 	sts	0x0061, r19
  ea:	20 93 60 00 	sts	0x0060, r18
	   y=128+y/2;
  ee:	80 91 62 00 	lds	r24, 0x0062
  f2:	90 91 63 00 	lds	r25, 0x0063
  f6:	99 23       	and	r25, r25
  f8:	0c f4       	brge	.+2      	; 0xfc <main+0x6a>
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	80 58       	subi	r24, 0x80	; 128
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	90 93 63 00 	sts	0x0063, r25
 108:	80 93 62 00 	sts	0x0062, r24
	   
	   if (max==0)
 10c:	23 2b       	or	r18, r19
 10e:	f9 f6       	brne	.-66     	; 0xce <main+0x3c>
	      {
		   max=8;
 110:	50 93 61 00 	sts	0x0061, r21
 114:	40 93 60 00 	sts	0x0060, r20
	       y=0;
 118:	10 92 63 00 	sts	0x0063, r1
 11c:	10 92 62 00 	sts	0x0062, r1
int main(void)
{
  DDRA=0xff;
    while(1)
    {
       for (int i=0;i<max;i++)
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	d6 cf       	rjmp	.-84     	; 0xd2 <main+0x40>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
