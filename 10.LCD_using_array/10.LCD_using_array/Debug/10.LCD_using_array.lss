
10.LCD_using_array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002e3  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000168  00000000  00000000  00000c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f0  00000000  00000000  00000dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000159  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000071  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 57 00 	call	0xae	; 0xae <main>
  7a:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <select_cmd_mode>:
}


void select_cmd_mode()
 {
  PORTA&=~(1<<PA0);//RS=0
  82:	d8 98       	cbi	0x1b, 0	; 27
  PORTA&=~(1<<PA1);//RW=0
  84:	d9 98       	cbi	0x1b, 1	; 27
  PORTA|=(1<<PA2);//EN=1
  86:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	97 e2       	ldi	r25, 0x27	; 39
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <select_cmd_mode+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <select_cmd_mode+0x10>
  92:	00 00       	nop
  _delay_ms(40);
  PORTA&=~(1<<PA2);//EN=0	
  94:	da 98       	cbi	0x1b, 2	; 27
  96:	08 95       	ret

00000098 <select_data_mode>:
}

void select_data_mode()
{
	PORTA|=(1<<PA0);//RS=1
  98:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA&=~(1<<PA1);//RW=0
  9a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<PA2);//EN=1
  9c:	da 9a       	sbi	0x1b, 2	; 27
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <select_data_mode+0xa>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <select_data_mode+0x10>
  a8:	00 00       	nop
	_delay_ms(40);
	PORTA&=~(1<<PA2);//EN=0
  aa:	da 98       	cbi	0x1b, 2	; 27
  ac:	08 95       	ret

000000ae <main>:
void lcd_cmd(char x);
void lcd_enable();


int main(void)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
 DDRA=DDRB=0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	c0 e6       	ldi	r28, 0x60	; 96
  be:	d0 e0       	ldi	r29, 0x00	; 0

void lcd_cmd(char x);
void lcd_enable();


int main(void)
  c0:	08 e6       	ldi	r16, 0x68	; 104
  c2:	10 e0       	ldi	r17, 0x00	; 0
{
 DDRA=DDRB=0xff;
 for (int i=0;i<4;i++)
  {
   PORTB=cmd[i];
  c4:	88 81       	ld	r24, Y
  c6:	22 96       	adiw	r28, 0x02	; 2
  c8:	88 bb       	out	0x18, r24	; 24
   select_cmd_mode();
  ca:	0e 94 41 00 	call	0x82	; 0x82 <select_cmd_mode>


int main(void)
{
 DDRA=DDRB=0xff;
 for (int i=0;i<4;i++)
  ce:	c0 17       	cp	r28, r16
  d0:	d1 07       	cpc	r29, r17
  d2:	c1 f7       	brne	.-16     	; 0xc4 <main+0x16>
  d4:	c2 e7       	ldi	r28, 0x72	; 114
  d6:	d0 e0       	ldi	r29, 0x00	; 0

void lcd_cmd(char x);
void lcd_enable();


int main(void)
  d8:	00 e8       	ldi	r16, 0x80	; 128
  da:	10 e0       	ldi	r17, 0x00	; 0
   select_cmd_mode();
  }
  
 for (int i=0;i<7;i++)
   {
	PORTB=data1[i];
  dc:	88 81       	ld	r24, Y
  de:	22 96       	adiw	r28, 0x02	; 2
  e0:	88 bb       	out	0x18, r24	; 24
	select_data_mode();
  e2:	0e 94 4c 00 	call	0x98	; 0x98 <select_data_mode>
  {
   PORTB=cmd[i];
   select_cmd_mode();
  }
  
 for (int i=0;i<7;i++)
  e6:	c0 17       	cp	r28, r16
  e8:	d1 07       	cpc	r29, r17
  ea:	c1 f7       	brne	.-16     	; 0xdc <main+0x2e>
	PORTB=data1[i];
	select_data_mode();
   }
  

PORTB=0xc0;
  ec:	80 ec       	ldi	r24, 0xC0	; 192
  ee:	88 bb       	out	0x18, r24	; 24
select_cmd_mode();
  f0:	0e 94 41 00 	call	0x82	; 0x82 <select_cmd_mode>
  f4:	c8 e6       	ldi	r28, 0x68	; 104
  f6:	d0 e0       	ldi	r29, 0x00	; 0

void lcd_cmd(char x);
void lcd_enable();


int main(void)
  f8:	02 e7       	ldi	r16, 0x72	; 114
  fa:	10 e0       	ldi	r17, 0x00	; 0
select_cmd_mode();


	for(int i=0;i<5;i++)
	{
		PORTB=data2[i];
  fc:	88 81       	ld	r24, Y
  fe:	22 96       	adiw	r28, 0x02	; 2
 100:	88 bb       	out	0x18, r24	; 24
		select_data_mode();
 102:	0e 94 4c 00 	call	0x98	; 0x98 <select_data_mode>

PORTB=0xc0;
select_cmd_mode();


	for(int i=0;i<5;i++)
 106:	c0 17       	cp	r28, r16
 108:	d1 07       	cpc	r29, r17
 10a:	c1 f7       	brne	.-16     	; 0xfc <main+0x4e>
	{
		PORTB=data2[i];
		select_data_mode();
	}

}
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
