
13.Lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000028e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000692  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018f  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ad  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014d  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b9  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  7a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
void lcd_string(char *);    //to display string on lcd
void lcd_enable();         //to enable lcd

void lcd_cmd(char x)
{
	LCD_PORT=x&0xf0;                 //sending cmd to lcd
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT&=~(1<<RS);//RS=0   //selection of cmd mode
  88:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<RW);//RW=0
  8a:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<EN);//EN=1
  8c:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e0       	ldi	r30, 0x0F	; 15
  90:	f7 e2       	ldi	r31, 0x27	; 39
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_cmd+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcd_cmd+0x16>
  98:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  9a:	da 98       	cbi	0x1b, 2	; 27

	LCD_PORT=(x<<4)&0xf0;            //sending cmd to lcd
  9c:	f0 e1       	ldi	r31, 0x10	; 16
  9e:	8f 9f       	mul	r24, r31
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT&=~(1<<RS);//RS=0   //selection of cmd mode
  a6:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<RW);//RW=0
  a8:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<EN);//EN=1
  aa:	da 9a       	sbi	0x1b, 2	; 27
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	97 e2       	ldi	r25, 0x27	; 39
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_cmd+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_cmd+0x34>
  b6:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  b8:	da 98       	cbi	0x1b, 2	; 27
  ba:	08 95       	ret

000000bc <lcd_data>:
}

void lcd_data(char x)
{
	LCD_PORT=x&0xf0;
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	9b bb       	out	0x1b, r25	; 27
	LCD_PORT|=(1<<RS);//RS=1
  c2:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<RW);//RW=0
  c4:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<EN);//EN=1
  c6:	da 9a       	sbi	0x1b, 2	; 27
  c8:	ef e0       	ldi	r30, 0x0F	; 15
  ca:	f7 e2       	ldi	r31, 0x27	; 39
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_data+0x10>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_data+0x16>
  d2:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  d4:	da 98       	cbi	0x1b, 2	; 27

	LCD_PORT=(x<<4)&0xf0;
  d6:	f0 e1       	ldi	r31, 0x10	; 16
  d8:	8f 9f       	mul	r24, r31
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT|=(1<<RS);//RS=1
  e0:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PORT&=~(1<<RW);//RW=0
  e2:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PORT|=(1<<EN);//EN=1
  e4:	da 9a       	sbi	0x1b, 2	; 27
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_data+0x2e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_data+0x34>
  f0:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  f2:	da 98       	cbi	0x1b, 2	; 27
  f4:	08 95       	ret

000000f6 <lcd_string>:
}

void lcd_string(char *ptr)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	while(*ptr)    //checking for NULL
  fc:	88 81       	ld	r24, Y
  fe:	88 23       	and	r24, r24
 100:	31 f0       	breq	.+12     	; 0x10e <lcd_string+0x18>
	LCD_PORT|=(1<<EN);//EN=1
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
}

void lcd_string(char *ptr)
 102:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr)    //checking for NULL
	{
		lcd_data(*ptr); // passing values to lcd
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_data>
	LCD_PORT&=~(1<<EN);//EN=0
}

void lcd_string(char *ptr)
{
	while(*ptr)    //checking for NULL
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	fb cf       	rjmp	.-10     	; 0x104 <lcd_string+0xe>
	{
		lcd_data(*ptr); // passing values to lcd
		ptr++; //increment address of ptr variable
	}
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_enable>:

void lcd_enable()
{
	LCD_PORT_dir=0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);//return home
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);//4bit mode
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0e);//display on ,cursor blink
 124:	8e e0       	ldi	r24, 0x0E	; 14
 126:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);//increment cursor to right
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 130:	08 95       	ret

00000132 <keypad_scan>:
#define  keypad_PORT_dir DDRD
#define  key_check       PIND

void keypad_scan()
{
	keypad_PORT_dir=0b11110000;//row as input and column as output
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	81 bb       	out	0x11, r24	; 17
	keypad_PORT=0b00001111;//col-> low and row -> high
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	82 bb       	out	0x12, r24	; 18

	//c1 (7 4 1 ON)
	keypad_PORT&=~(1<<C1);//c1=0
 13a:	94 98       	cbi	0x12, 4	; 18
	keypad_PORT|=(1<<C2)|(1<<C3)|(1<<C4);//c2=c3=c4=1
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	80 6e       	ori	r24, 0xE0	; 224
 140:	82 bb       	out	0x12, r24	; 18
	
	if(!(key_check &(1<<R1)))
 142:	80 99       	sbic	0x10, 0	; 16
 144:	0a c0       	rjmp	.+20     	; 0x15a <keypad_scan+0x28>
	{
		lcd_string("7");
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 14e:	87 ea       	ldi	r24, 0xA7	; 167
 150:	91 e6       	ldi	r25, 0x61	; 97
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <keypad_scan+0x20>
 156:	00 c0       	rjmp	.+0      	; 0x158 <keypad_scan+0x26>
 158:	00 00       	nop
		_delay_ms(100);
	}
	
	if(!(key_check & (1<<R2)))
 15a:	81 99       	sbic	0x10, 1	; 16
 15c:	04 c0       	rjmp	.+8      	; 0x166 <keypad_scan+0x34>
	{
		lcd_string("4");
 15e:	82 e6       	ldi	r24, 0x62	; 98
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check &(1<<R3)))
 166:	82 99       	sbic	0x10, 2	; 16
 168:	04 c0       	rjmp	.+8      	; 0x172 <keypad_scan+0x40>
	{
		lcd_string("1");
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check & (1<<R4)))
 172:	83 99       	sbic	0x10, 3	; 16
 174:	04 c0       	rjmp	.+8      	; 0x17e <keypad_scan+0x4c>
	{
		lcd_string("ON");
 176:	86 e6       	ldi	r24, 0x66	; 102
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	
	//c2 (8 5 2 0)
	keypad_PORT&=~(1<<C2);//c2=0
 17e:	95 98       	cbi	0x12, 5	; 18
	keypad_PORT|=(1<<C1)|(1<<C3)|(1<<C4);//c1=c3=c4=1
 180:	82 b3       	in	r24, 0x12	; 18
 182:	80 6d       	ori	r24, 0xD0	; 208
 184:	82 bb       	out	0x12, r24	; 18
	
	if(!(key_check &(1<<R1)))
 186:	80 99       	sbic	0x10, 0	; 16
 188:	0a c0       	rjmp	.+20     	; 0x19e <keypad_scan+0x6c>
	{
		lcd_string("8");
 18a:	89 e6       	ldi	r24, 0x69	; 105
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 192:	87 ea       	ldi	r24, 0xA7	; 167
 194:	91 e6       	ldi	r25, 0x61	; 97
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <keypad_scan+0x64>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <keypad_scan+0x6a>
 19c:	00 00       	nop
		_delay_ms(100);
	}
	
	if(!(key_check & (1<<R2)))
 19e:	81 99       	sbic	0x10, 1	; 16
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <keypad_scan+0x78>
	{
		lcd_string("5");
 1a2:	8b e6       	ldi	r24, 0x6B	; 107
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check &(1<<R3)))
 1aa:	82 99       	sbic	0x10, 2	; 16
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <keypad_scan+0x84>
	{
		lcd_string("2");
 1ae:	8d e6       	ldi	r24, 0x6D	; 109
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check & (1<<R4)))
 1b6:	83 99       	sbic	0x10, 3	; 16
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <keypad_scan+0x90>
	{
		lcd_string("0");
 1ba:	8f e6       	ldi	r24, 0x6F	; 111
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	//c3 (9 6 3 =)
	keypad_PORT&=~(1<<C3);//c3=0
 1c2:	96 98       	cbi	0x12, 6	; 18
	keypad_PORT|=(1<<C2)|(1<<C1)|(1<<C4);//c2=c1=c4=1
 1c4:	82 b3       	in	r24, 0x12	; 18
 1c6:	80 6b       	ori	r24, 0xB0	; 176
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	87 ea       	ldi	r24, 0xA7	; 167
 1cc:	91 e6       	ldi	r25, 0x61	; 97
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <keypad_scan+0x9c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <keypad_scan+0xa2>
 1d4:	00 00       	nop
	_delay_ms(100);
	if(!(key_check &(1<<R1)))
 1d6:	80 99       	sbic	0x10, 0	; 16
 1d8:	0a c0       	rjmp	.+20     	; 0x1ee <keypad_scan+0xbc>
	{
		lcd_string("9");
 1da:	81 e7       	ldi	r24, 0x71	; 113
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 1e2:	87 ea       	ldi	r24, 0xA7	; 167
 1e4:	91 e6       	ldi	r25, 0x61	; 97
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <keypad_scan+0xb4>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <keypad_scan+0xba>
 1ec:	00 00       	nop
		_delay_ms(100);
	}
	
	if(!(key_check & (1<<R2)))
 1ee:	81 99       	sbic	0x10, 1	; 16
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <keypad_scan+0xc8>
	{
		lcd_string("6");
 1f2:	83 e7       	ldi	r24, 0x73	; 115
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check &(1<<R3)))
 1fa:	82 99       	sbic	0x10, 2	; 16
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <keypad_scan+0xd4>
	{
		lcd_string("3");
 1fe:	85 e7       	ldi	r24, 0x75	; 117
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check & (1<<R4)))
 206:	83 99       	sbic	0x10, 3	; 16
 208:	04 c0       	rjmp	.+8      	; 0x212 <keypad_scan+0xe0>
	{
		lcd_string("=");
 20a:	87 e7       	ldi	r24, 0x77	; 119
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	
	//c4 (/ * - +)
	keypad_PORT&=~(1<<C4);//c4=0
 212:	97 98       	cbi	0x12, 7	; 18
	keypad_PORT|=(1<<C1)|(1<<C3)|(1<<C2);//c2=c3=c1=1
 214:	82 b3       	in	r24, 0x12	; 18
 216:	80 67       	ori	r24, 0x70	; 112
 218:	82 bb       	out	0x12, r24	; 18
	
	if(!(key_check &(1<<R1)))
 21a:	80 99       	sbic	0x10, 0	; 16
 21c:	0a c0       	rjmp	.+20     	; 0x232 <keypad_scan+0x100>
	{
		lcd_string("/");
 21e:	89 e7       	ldi	r24, 0x79	; 121
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 226:	87 ea       	ldi	r24, 0xA7	; 167
 228:	91 e6       	ldi	r25, 0x61	; 97
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <keypad_scan+0xf8>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <keypad_scan+0xfe>
 230:	00 00       	nop
		_delay_ms(100);
	}
	
	if(!(key_check & (1<<R2)))
 232:	81 99       	sbic	0x10, 1	; 16
 234:	04 c0       	rjmp	.+8      	; 0x23e <keypad_scan+0x10c>
	{
		lcd_string("*");
 236:	8b e7       	ldi	r24, 0x7B	; 123
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check &(1<<R3)))
 23e:	82 99       	sbic	0x10, 2	; 16
 240:	04 c0       	rjmp	.+8      	; 0x24a <keypad_scan+0x118>
	{
		lcd_string("-");
 242:	8d e7       	ldi	r24, 0x7D	; 125
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	}
	
	if(!(key_check & (1<<R4)))
 24a:	83 99       	sbic	0x10, 3	; 16
 24c:	04 c0       	rjmp	.+8      	; 0x256 <keypad_scan+0x124>
	{
		lcd_string("+");
 24e:	8f e7       	ldi	r24, 0x7F	; 127
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 256:	08 95       	ret

00000258 <main>:
#include "LCD_4bit.h"
#include "Keypad_header.h"

int main(void)
{
 lcd_enable();
 258:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_enable>
 lcd_string("Enter key: ");
 25c:	81 e8       	ldi	r24, 0x81	; 129
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 lcd_cmd(0xc0);                //2nd line of lcd
 264:	80 ec       	ldi	r24, 0xC0	; 192
 266:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_string(">");
 26a:	8d e8       	ldi	r24, 0x8D	; 141
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
 while (1)
 {
  lcd_cmd(0xc2);
 272:	82 ec       	ldi	r24, 0xC2	; 194
 274:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 278:	87 ea       	ldi	r24, 0xA7	; 167
 27a:	91 e6       	ldi	r25, 0x61	; 97
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x24>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x2a>
 282:	00 00       	nop
  _delay_ms(100);
  keypad_scan();	 
 284:	0e 94 99 00 	call	0x132	; 0x132 <keypad_scan>
 288:	f4 cf       	rjmp	.-24     	; 0x272 <main+0x1a>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
