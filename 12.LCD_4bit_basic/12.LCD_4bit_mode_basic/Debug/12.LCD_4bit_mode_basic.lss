
12.LCD_4bit_mode_basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000323  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000174  00000000  00000000  00000ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020a  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000151  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000099  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 99 00 	call	0x132	; 0x132 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
void lcd_string(char *);    //to display string on lcd
void lcd_enable();         //to enable lcd

void lcd_cmd(char x)
{
LCD_PORT=x&0xf0;                 //sending cmd to lcd
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	95 bb       	out	0x15, r25	; 21
	LCD_PORT&=~(1<<RS);//RS=0   //selection of cmd mode
  88:	a8 98       	cbi	0x15, 0	; 21
	LCD_PORT&=~(1<<RW);//RW=0
  8a:	a9 98       	cbi	0x15, 1	; 21
	LCD_PORT|=(1<<EN);//EN=1
  8c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e0       	ldi	r30, 0x0F	; 15
  90:	f7 e2       	ldi	r31, 0x27	; 39
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_cmd+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcd_cmd+0x16>
  98:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  9a:	aa 98       	cbi	0x15, 2	; 21

LCD_PORT=(x<<4)&0xf0;            //sending cmd to lcd
  9c:	f0 e1       	ldi	r31, 0x10	; 16
  9e:	8f 9f       	mul	r24, r31
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	85 bb       	out	0x15, r24	; 21
 	LCD_PORT&=~(1<<RS);//RS=0   //selection of cmd mode
  a6:	a8 98       	cbi	0x15, 0	; 21
 	LCD_PORT&=~(1<<RW);//RW=0
  a8:	a9 98       	cbi	0x15, 1	; 21
 	LCD_PORT|=(1<<EN);//EN=1
  aa:	aa 9a       	sbi	0x15, 2	; 21
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	97 e2       	ldi	r25, 0x27	; 39
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_cmd+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_cmd+0x34>
  b6:	00 00       	nop
 	_delay_ms(40);
 	LCD_PORT&=~(1<<EN);//EN=0 	 
  b8:	aa 98       	cbi	0x15, 2	; 21
  ba:	08 95       	ret

000000bc <lcd_data>:
}

void lcd_data(char x)
{
LCD_PORT=x&0xf0;
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	95 bb       	out	0x15, r25	; 21
	LCD_PORT|=(1<<RS);//RS=1
  c2:	a8 9a       	sbi	0x15, 0	; 21
	LCD_PORT&=~(1<<RW);//RW=0
  c4:	a9 98       	cbi	0x15, 1	; 21
	LCD_PORT|=(1<<EN);//EN=1
  c6:	aa 9a       	sbi	0x15, 2	; 21
  c8:	ef e0       	ldi	r30, 0x0F	; 15
  ca:	f7 e2       	ldi	r31, 0x27	; 39
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_data+0x10>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_data+0x16>
  d2:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  d4:	aa 98       	cbi	0x15, 2	; 21

LCD_PORT=(x<<4)&0xf0;
  d6:	f0 e1       	ldi	r31, 0x10	; 16
  d8:	8f 9f       	mul	r24, r31
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	85 bb       	out	0x15, r24	; 21
	LCD_PORT|=(1<<RS);//RS=1
  e0:	a8 9a       	sbi	0x15, 0	; 21
	LCD_PORT&=~(1<<RW);//RW=0
  e2:	a9 98       	cbi	0x15, 1	; 21
	LCD_PORT|=(1<<EN);//EN=1
  e4:	aa 9a       	sbi	0x15, 2	; 21
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_data+0x2e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_data+0x34>
  f0:	00 00       	nop
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
  f2:	aa 98       	cbi	0x15, 2	; 21
  f4:	08 95       	ret

000000f6 <lcd_string>:
}

void lcd_string(char *ptr)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	while(*ptr)    //checking for NULL
  fc:	88 81       	ld	r24, Y
  fe:	88 23       	and	r24, r24
 100:	31 f0       	breq	.+12     	; 0x10e <lcd_string+0x18>
	LCD_PORT|=(1<<EN);//EN=1
	_delay_ms(40);
	LCD_PORT&=~(1<<EN);//EN=0
}

void lcd_string(char *ptr)
 102:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr)    //checking for NULL
	{
		lcd_data(*ptr); // passing values to lcd
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_data>
	LCD_PORT&=~(1<<EN);//EN=0
}

void lcd_string(char *ptr)
{
	while(*ptr)    //checking for NULL
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	fb cf       	rjmp	.-10     	; 0x104 <lcd_string+0xe>
	{
		lcd_data(*ptr); // passing values to lcd
		ptr++; //increment address of ptr variable
	}
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_enable>:

void lcd_enable()
{
	LCD_PORT_dir=0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 bb       	out	0x14, r24	; 20
	lcd_cmd(0x02);//return home
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);//4bit mode
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0e);//display on ,cursor blink
 124:	8e e0       	ldi	r24, 0x0E	; 14
 126:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);//increment cursor to right
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 130:	08 95       	ret

00000132 <main>:
}

int main(void)
{
	lcd_enable();
 132:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_enable>
	lcd_string(" LCD 4 bit mode !");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
	lcd_cmd(0xc0);//2nd line of lcd
 13e:	80 ec       	ldi	r24, 0xC0	; 192
 140:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_string(" i m 2nd line ");
 144:	82 e7       	ldi	r24, 0x72	; 114
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_string>
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
